/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  8008135: {
    FederatedCore: {
      address: "0xcb6cDd4bb2F7b69992Fa901E3C20F23B2Ce9829a",
      abi: [
        {
          type: "constructor",
          inputs: [{ name: "initialOwner", type: "address", internalType: "address" }],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "addReputation",
          inputs: [{ name: "user", type: "address", internalType: "address" }],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "createAgreement",
          inputs: [
            { name: "_owner", type: "address", internalType: "address" },
            { name: "_totalRewards", type: "uint256", internalType: "uint256" },
            { name: "_collateralAmount", type: "uint256", internalType: "uint256" },
            { name: "_maximumParticipants", type: "uint256", internalType: "uint256" },
            { name: "_reputationThreshold", type: "uint256", internalType: "uint256" },
            { name: "_maximumRounds", type: "uint256", internalType: "uint256" },
            { name: "_isWhitelist", type: "bool", internalType: "bool" },
            { name: "_whitelistedAddress", type: "address[]", internalType: "address[]" },
          ],
          outputs: [{ name: "", type: "address", internalType: "address" }],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "emitAgreementFinished",
          inputs: [
            { name: "agreement", type: "address", internalType: "address" },
            { name: "round", type: "uint256", internalType: "uint256" },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "emitAgreementProceedNextRound",
          inputs: [
            { name: "agreement", type: "address", internalType: "address" },
            { name: "round", type: "uint256", internalType: "uint256" },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getReputation",
          inputs: [{ name: "user", type: "address", internalType: "address" }],
          outputs: [{ name: "", type: "int256", internalType: "int256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [{ name: "", type: "address", internalType: "address" }],
          stateMutability: "view",
        },
        { type: "function", name: "renounceOwnership", inputs: [], outputs: [], stateMutability: "nonpayable" },
        {
          type: "function",
          name: "subtractReputation",
          inputs: [{ name: "user", type: "address", internalType: "address" }],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [{ name: "newOwner", type: "address", internalType: "address" }],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "AgreementCreated",
          inputs: [
            { name: "agreement", type: "address", indexed: true, internalType: "address" },
            { name: "owner", type: "address", indexed: true, internalType: "address" },
            { name: "totalRewards", type: "uint256", indexed: false, internalType: "uint256" },
            { name: "collateralAmount", type: "uint256", indexed: false, internalType: "uint256" },
            { name: "maximumParticipants", type: "uint256", indexed: false, internalType: "uint256" },
            { name: "reputationThreshold", type: "uint256", indexed: false, internalType: "uint256" },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "AgreementFinished",
          inputs: [
            { name: "agreement", type: "address", indexed: true, internalType: "address" },
            { name: "round", type: "uint256", indexed: true, internalType: "uint256" },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "AgreementProceedNextRound",
          inputs: [
            { name: "agreement", type: "address", indexed: true, internalType: "address" },
            { name: "round", type: "uint256", indexed: true, internalType: "uint256" },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            { name: "previousOwner", type: "address", indexed: true, internalType: "address" },
            { name: "newOwner", type: "address", indexed: true, internalType: "address" },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ReputationAdded",
          inputs: [{ name: "user", type: "address", indexed: true, internalType: "address" }],
          anonymous: false,
        },
        {
          type: "event",
          name: "ReputationSubtracted",
          inputs: [{ name: "user", type: "address", indexed: true, internalType: "address" }],
          anonymous: false,
        },
        { type: "error", name: "InsufficientFunds", inputs: [] },
        { type: "error", name: "NotAgreement", inputs: [] },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [{ name: "owner", type: "address", internalType: "address" }],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [{ name: "account", type: "address", internalType: "address" }],
        },
        { type: "error", name: "TokenNotSupported", inputs: [] },
        { type: "error", name: "TransferFailed", inputs: [] },
      ],
    },
    FederatedAgreement: {
      address: "0x",
      abi: [
        {
          type: "constructor",
          inputs: [
            { name: "_owner", type: "address", internalType: "address" },
            { name: "_totalRewards", type: "uint256", internalType: "uint256" },
            { name: "_collateralAmount", type: "uint256", internalType: "uint256" },
            { name: "_maximumParticipants", type: "uint256", internalType: "uint256" },
            { name: "_reputationThreshold", type: "uint256", internalType: "uint256" },
            { name: "_coreAddress", type: "address", internalType: "address" },
            { name: "_maximumRounds", type: "uint256", internalType: "uint256" },
            { name: "_isWhitelist", type: "bool", internalType: "bool" },
            { name: "_whitelistedAddress", type: "address[]", internalType: "address[]" },
          ],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "COLLATERAL_AMOUNT",
          inputs: [],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "CORE_ADDRESS",
          inputs: [],
          outputs: [{ name: "", type: "address", internalType: "address" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "MAXIMUM_PARTICIPANTS",
          inputs: [],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "MAXIMUM_ROUNDS",
          inputs: [],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "REPUTATION_THRESHOLD",
          inputs: [],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "REWARD_EACH_ROUND",
          inputs: [],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "TOTAL_REWARDS",
          inputs: [],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        { type: "function", name: "_proceedNextRound", inputs: [], outputs: [], stateMutability: "nonpayable" },
        {
          type: "function",
          name: "addParticipant",
          inputs: [{ name: "participant", type: "address", internalType: "address" }],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "calculateRewards",
          inputs: [{ name: "participant", type: "address", internalType: "address" }],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "collaterals",
          inputs: [{ name: "", type: "address", internalType: "address" }],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        { type: "function", name: "confirmRoundState", inputs: [], outputs: [], stateMutability: "nonpayable" },
        {
          type: "function",
          name: "createProposal",
          inputs: [
            { name: "suspiciousParticipant", type: "address", internalType: "address" },
            { name: "description", type: "string", internalType: "string" },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "eip712Domain",
          inputs: [],
          outputs: [
            { name: "fields", type: "bytes1", internalType: "bytes1" },
            { name: "name", type: "string", internalType: "string" },
            { name: "version", type: "string", internalType: "string" },
            { name: "chainId", type: "uint256", internalType: "uint256" },
            { name: "verifyingContract", type: "address", internalType: "address" },
            { name: "salt", type: "bytes32", internalType: "bytes32" },
            { name: "extensions", type: "uint256[]", internalType: "uint256[]" },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "encHighPrivateKey",
          inputs: [],
          outputs: [{ name: "data", type: "bytes", internalType: "bytes" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "encLowPrivateKey",
          inputs: [],
          outputs: [{ name: "data", type: "bytes", internalType: "bytes" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "finalizeProposal",
          inputs: [{ name: "index", type: "uint256", internalType: "uint256" }],
          outputs: [],
          stateMutability: "nonpayable",
        },
        { type: "function", name: "finishAgreement", inputs: [], outputs: [], stateMutability: "nonpayable" },
        {
          type: "function",
          name: "finishAgreementSandbox",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getPrivateKey",
          inputs: [],
          outputs: [
            { name: "", type: "uint128", internalType: "uint128" },
            { name: "", type: "uint128", internalType: "uint128" },
            { name: "", type: "string", internalType: "string" },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getProposals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct IFederatedAgreementTypes.Proposal[]",
              components: [
                { name: "proposer", type: "address", internalType: "address" },
                { name: "suspiciousParticipant", type: "address", internalType: "address" },
                { name: "proposalId", type: "uint256", internalType: "uint256" },
                { name: "proposalRound", type: "uint256", internalType: "uint256" },
                { name: "proposalVotingTime", type: "uint256", internalType: "uint256" },
                { name: "proposalVotesYes", type: "uint256", internalType: "uint256" },
                { name: "proposalVotesNo", type: "uint256", internalType: "uint256" },
                {
                  name: "proposalStatus",
                  type: "uint8",
                  internalType: "enum IFederatedAgreementTypes.ProposalStatus",
                },
                { name: "proposalDescription", type: "string", internalType: "string" },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getRedeemCollateralIfRandomSampling",
          inputs: [{ name: "user", type: "address", internalType: "address" }],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getRewards",
          inputs: [{ name: "participant", type: "address", internalType: "address" }],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "hasVoted",
          inputs: [
            { name: "", type: "address", internalType: "address" },
            { name: "", type: "uint256", internalType: "uint256" },
          ],
          outputs: [{ name: "", type: "bool", internalType: "bool" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isParticipant",
          inputs: [{ name: "", type: "address", internalType: "address" }],
          outputs: [{ name: "", type: "bool", internalType: "bool" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isWhitelist",
          inputs: [],
          outputs: [{ name: "", type: "bool", internalType: "bool" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "lastClaimedRound",
          inputs: [{ name: "", type: "address", internalType: "address" }],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [{ name: "", type: "address", internalType: "address" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "participants",
          inputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          outputs: [{ name: "", type: "address", internalType: "address" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proceedNextRoundSandbox",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "proposalId",
          inputs: [],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposals",
          inputs: [
            { name: "", type: "uint256", internalType: "uint256" },
            { name: "", type: "uint256", internalType: "uint256" },
          ],
          outputs: [
            { name: "proposer", type: "address", internalType: "address" },
            { name: "suspiciousParticipant", type: "address", internalType: "address" },
            { name: "proposalId", type: "uint256", internalType: "uint256" },
            { name: "proposalRound", type: "uint256", internalType: "uint256" },
            { name: "proposalVotingTime", type: "uint256", internalType: "uint256" },
            { name: "proposalVotesYes", type: "uint256", internalType: "uint256" },
            { name: "proposalVotesNo", type: "uint256", internalType: "uint256" },
            { name: "proposalStatus", type: "uint8", internalType: "enum IFederatedAgreementTypes.ProposalStatus" },
            { name: "proposalDescription", type: "string", internalType: "string" },
          ],
          stateMutability: "view",
        },
        { type: "function", name: "redeemCollateral", inputs: [], outputs: [], stateMutability: "nonpayable" },
        {
          type: "function",
          name: "redeemCollateralIfRandomSampling",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        { type: "function", name: "redeemRewards", inputs: [], outputs: [], stateMutability: "nonpayable" },
        {
          type: "function",
          name: "rewards",
          inputs: [{ name: "", type: "address", internalType: "address" }],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "round",
          inputs: [],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "roundIPFSHashes",
          inputs: [
            { name: "", type: "address", internalType: "address" },
            { name: "", type: "uint256", internalType: "uint256" },
          ],
          outputs: [{ name: "", type: "string", internalType: "string" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "roundStateConfirmed",
          inputs: [
            { name: "", type: "address", internalType: "address" },
            { name: "", type: "uint256", internalType: "uint256" },
          ],
          outputs: [{ name: "", type: "bool", internalType: "bool" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "roundStateConfirmedCount",
          inputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "setPrivateKey",
          inputs: [
            {
              name: "first30",
              type: "tuple",
              internalType: "struct inEuint128",
              components: [{ name: "data", type: "bytes", internalType: "bytes" }],
            },
            {
              name: "last30",
              type: "tuple",
              internalType: "struct inEuint128",
              components: [{ name: "data", type: "bytes", internalType: "bytes" }],
            },
            { name: "middlePart", type: "string", internalType: "string" },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        { type: "function", name: "startAgreement", inputs: [], outputs: [], stateMutability: "nonpayable" },
        {
          type: "function",
          name: "status",
          inputs: [],
          outputs: [
            { name: "", type: "uint8", internalType: "enum IFederatedAgreementTypes.FederatedAgreementStatus" },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "submitRoundIPFSState",
          inputs: [{ name: "ipfsHash", type: "string", internalType: "string" }],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "suspiciousCounts",
          inputs: [{ name: "", type: "address", internalType: "address" }],
          outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "voteProposal",
          inputs: [
            { name: "index", type: "uint256", internalType: "uint256" },
            { name: "isVoteYes", type: "bool", internalType: "bool" },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "whitelistedParticipants",
          inputs: [{ name: "", type: "uint256", internalType: "uint256" }],
          outputs: [{ name: "", type: "address", internalType: "address" }],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "AgreementFinished",
          inputs: [{ name: "round", type: "uint256", indexed: true, internalType: "uint256" }],
          anonymous: false,
        },
        { type: "event", name: "AgreementStarted", inputs: [], anonymous: false },
        {
          type: "event",
          name: "CollateralRedeemed",
          inputs: [
            { name: "participant", type: "address", indexed: true, internalType: "address" },
            { name: "amount", type: "uint256", indexed: false, internalType: "uint256" },
          ],
          anonymous: false,
        },
        { type: "event", name: "EIP712DomainChanged", inputs: [], anonymous: false },
        {
          type: "event",
          name: "Initialized",
          inputs: [{ name: "version", type: "uint64", indexed: false, internalType: "uint64" }],
          anonymous: false,
        },
        {
          type: "event",
          name: "ParticipantAdded",
          inputs: [{ name: "participant", type: "address", indexed: true, internalType: "address" }],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProceedNextRound",
          inputs: [{ name: "round", type: "uint256", indexed: true, internalType: "uint256" }],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProposalCreated",
          inputs: [
            { name: "proposer", type: "address", indexed: true, internalType: "address" },
            { name: "suspiciousParticipant", type: "address", indexed: true, internalType: "address" },
            { name: "proposalRound", type: "uint256", indexed: true, internalType: "uint256" },
            { name: "proposalId", type: "uint256", indexed: false, internalType: "uint256" },
            { name: "proposalExpirationTime", type: "uint256", indexed: false, internalType: "uint256" },
            { name: "proposalDescription", type: "string", indexed: false, internalType: "string" },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProposalFinalized",
          inputs: [
            { name: "proposalId", type: "uint256", indexed: true, internalType: "uint256" },
            { name: "proposalRound", type: "uint256", indexed: true, internalType: "uint256" },
            { name: "isAccepted", type: "bool", indexed: false, internalType: "bool" },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProposalVoted",
          inputs: [
            { name: "voter", type: "address", indexed: true, internalType: "address" },
            { name: "proposalId", type: "uint256", indexed: true, internalType: "uint256" },
            { name: "proposalRound", type: "uint256", indexed: true, internalType: "uint256" },
            { name: "isVoteYes", type: "bool", indexed: false, internalType: "bool" },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "RewardsRedeemed",
          inputs: [
            { name: "participant", type: "address", indexed: true, internalType: "address" },
            { name: "round", type: "uint256", indexed: true, internalType: "uint256" },
            { name: "amount", type: "uint256", indexed: false, internalType: "uint256" },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "RoundIPFSStateSubmitted",
          inputs: [
            { name: "participant", type: "address", indexed: true, internalType: "address" },
            { name: "round", type: "uint256", indexed: true, internalType: "uint256" },
            { name: "ipfsHash", type: "string", indexed: true, internalType: "string" },
          ],
          anonymous: false,
        },
        { type: "error", name: "AlreadyConfirmed", inputs: [] },
        { type: "error", name: "AlreadyParticipant", inputs: [] },
        { type: "error", name: "AlreadySubmitted", inputs: [] },
        { type: "error", name: "AlreadyVoted", inputs: [] },
        { type: "error", name: "CollateralTransferFailed", inputs: [] },
        { type: "error", name: "IPFSStateNotSubmitted", inputs: [] },
        { type: "error", name: "InsufficientFunds", inputs: [] },
        { type: "error", name: "InvalidAgreementStatus", inputs: [] },
        { type: "error", name: "InvalidInitialization", inputs: [] },
        { type: "error", name: "InvalidPrivateKey", inputs: [] },
        { type: "error", name: "InvalidShortString", inputs: [] },
        { type: "error", name: "MaximumParticipantsReached", inputs: [] },
        { type: "error", name: "MinimumParticipantsNotReached", inputs: [] },
        { type: "error", name: "MinimumVotesRequiredNotReached", inputs: [] },
        { type: "error", name: "NoRewardsAvailable", inputs: [] },
        { type: "error", name: "NotFinished", inputs: [] },
        { type: "error", name: "NotInitializing", inputs: [] },
        { type: "error", name: "NotOwner", inputs: [] },
        { type: "error", name: "NotParticipant", inputs: [] },
        { type: "error", name: "NotPending", inputs: [] },
        { type: "error", name: "NotRunning", inputs: [] },
        { type: "error", name: "NotWhitelistedParticipant", inputs: [] },
        { type: "error", name: "ProposalCreatorCannotVote", inputs: [] },
        { type: "error", name: "ProposalNotVoting", inputs: [] },
        { type: "error", name: "ProposalRoundNotMatch", inputs: [] },
        { type: "error", name: "ProposalStillVoting", inputs: [] },
        { type: "error", name: "ProposalVotingTimeExceeded", inputs: [] },
        { type: "error", name: "ProposalVotingTimeNotPassed", inputs: [] },
        { type: "error", name: "ReputationCheckFailed", inputs: [] },
        { type: "error", name: "RewardsTransferFailed", inputs: [] },
        { type: "error", name: "SignerNotMessageSender", inputs: [] },
        { type: "error", name: "SignerNotOwner", inputs: [] },
        {
          type: "error",
          name: "StringTooLong",
          inputs: [{ name: "str", type: "string", internalType: "string" }],
        },
      ],
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
